generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BUSINESS
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String

  role         Role    @default(BUSINESS)
  password     String
  refreshToken String?

  reviews       Review[]
  reviewReports ReviewReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id    Int     @id @default(autoincrement())
  name  String?
  phone String? @unique
  email String? @unique

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      Int     @id @default(autoincrement())
  rating  Int
  comment String?

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  businessId Int
  business   User     @relation(fields: [businessId], references: [id], onDelete: Cascade)

  tags          TagsOnReviews[]
  reviewReports ReviewReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessId, customerId])
  @@index([customerId])
  @@index([businessId])
}

enum TagType {
  POSITIVE
  NEGATIVE
}

model ReviewTag {
  id      Int             @id @default(autoincrement())
  name    String          @unique
  type    TagType
  reviews TagsOnReviews[]
}

model TagsOnReviews {
  id       Int       @id @default(autoincrement())
  tagId    Int
  tag      ReviewTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  reviewId Int
  review   Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([tagId, reviewId])
  @@index([tagId])
  @@index([reviewId])
}

model ReviewReport {
  id     Int     @id @default(autoincrement())
  reason String?

  reviewId   Int
  review     Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reporterId Int
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([reporterId, reviewId])
  @@index([reviewId])
  @@index([reporterId])
}
